Shader "Custom/Distort" {
	Properties {
    _RayOffsetX ("ray offset X", Float) = 0.0
    _RayOffsetY ("ray offset Y", Float) = 0.0
    _RayScaleX ("ray scale X", Float) = 0.0
    _RayScaleY ("ray scale Y", Float) = 0.0
    _MainTex ("image", 2D) = "" {}
    _DistortX ("distortionX", 2D) = "" {}
    _DistortY ("distortionY", 2D) = "" {}
	}

	SubShader {
		Pass {
			CGPROGRAM
			#pragma vertex vert
			#pragma fragment frag

			#include "UnityCG.cginc"

      #define MSIZE 5

      uniform float _RayOffsetX;
      uniform float _RayOffsetY;
      uniform float _RayScaleX;
      uniform float _RayScaleY;
			uniform sampler2D _MainTex;
			uniform sampler2D _DistortX;
			uniform sampler2D _DistortY;

      struct fragment_input{
				float4 position : SV_POSITION;
				float2 uv : TEXCOORD0;
			};

      fragment_input vert(appdata_img v) {
        fragment_input o;
        o.position = mul(UNITY_MATRIX_MVP, v.vertex);
        o.uv = MultiplyUV(UNITY_MATRIX_TEXTURE0, v.texcoord);
        return o;
      }

			float4 frag(fragment_input input) : COLOR {
        // Unwarp the point. Correct oculus distortion, if applicable
        float2 ray = input.uv * float2(8.0, 8.0) - float2(4.0, 4.0); // range [-4, 4] x [-4, 4]
        float2 texDist = ray * float2(_RayScaleX, _RayScaleY) + float2(_RayOffsetX, _RayOffsetY);
        float texImageX = DecodeFloatRGBA(tex2D(_DistortX, texDist));
        texImageX = texImageX * 2.3 - 0.6; // [0..1) -> [-0.6..1.7)
        float texImageY = DecodeFloatRGBA(tex2D(_DistortY, texDist));
        texImageY = texImageY * 2.3 - 0.6;

        float2 texCoord = float2(texImageX, texImageY);
        // Look up point in our texture
        if (texCoord.x > 0.0 && texCoord.x < 1.0 && texCoord.y > 0.0 && texCoord.y < 1.0) {
          texCoord.y = 1.0 - texCoord.y; // why does the distortion map flip us upside-down?
          float a = tex2D(_MainTex, texCoord).a;
          // for debug: draw the normalized distortion map in blue, hand in red
          return float4(a, a, a, 1.0);
        }
        return float4(1.0, 0.0, 0.0, 1.0);
			}
			ENDCG
		}
	}
}
